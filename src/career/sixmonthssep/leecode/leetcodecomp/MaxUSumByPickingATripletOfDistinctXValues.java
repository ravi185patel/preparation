package career.sixmonthssep.leecode.leetcodecomp;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class MaxUSumByPickingATripletOfDistinctXValues {
    public static void main(String[] args) {
//        int []x = {1,2,1,3,2}, y = {5,3,4,6,2};
//        int [] x={537752,768595,310334,107284,452969,962567,12110,903222,679414,842633,900121,825437,925366,388064,492959,546038,536644,963847,975829,310549,430852,318172,763602,841019,962567,926965,195429,612223,863013,834473,39923,644086,348969,768595,401581,67792,363010,872259,4126,783412,1116,970579,124407,442286,366043,934368,342013,736422,745758,489221,453725,671637,564278,319345,155272,805809,934368,641852,183314,498503,578441,346646,946812,209597,992389,814935,466796,970579,162632,30566,896787,992389,620532,978229,76705,551244,650614,890459,689561,310549,28603,577375,598131,814509,555017,272062,396401,304706,582727,188278,331912,162497,226370,225960,107284,24062,805809,600409,661485,458469,611487,256393,285469,201875,588632,146482,517557,944209,410995,257704,595685,516398,975829,109106,847414,640711,463231,92675,340581,41818,97591,139556,634086,401745,533855,206689,888272,99905,762516,919739,397242,333990,839813,617285,121232,491423,832486,971303,546455,790163,392305,344152,988530,319345,14490,78638,214358,617680,731683,255145,499322,165700,315241,117914,928225,210055,549284,388064,900462,802659,215478,57967,72356,245316,96314,952108,335814,891416,848289,813160,287067,101578,368735,258360,7762,375483,580613,97774,917889,732514,694245,359895,41975,918423,620532,556360,901386,204066,662467,893378,396149,254907,952108,151786,245136,345283,484006,338499,161797,57593,384908,62194,344152,670469,545997,552489,866873,635920,623650,395504,588632,868428,878589,670469,857839,953707,888272,627794,636821,971638,923094,891357,213222,73809,581753,189085,236655,347386,358748,692911,236971,153032,359929,910717,860854,137009,550880,217218,691976,940446,834473,813284,178302,560820,802659,921119,210055,535420,857839,201875,275660,458469,658881,496904,295333,839743,903280,358122,165858,112200,880556,752041,576090,275852,368324,318771,717143,674068,28603,872106,872229,886000,859572,347469,344152,467996,155272,101578,525621,564596,822653,662276,621646,899639,842938,916641,804220,542655,749059,547838,661680,887335,831591,258499,86643,270577,537752,997487,280012,266633,345209,393450,537961,88439,313852,264918,88439,888272,396401,112200,502505,537711,888272,750793,151786,359929,288657,814935,551223,4126,783412,624799,693846,128256,991296,473935,919782,155978,537711,279734,600409,700857,930106,734820,963847,687291,39923,867290,876806,181146,404685,393450,682880,781513,359929,438324,804220,817080,551223,270241,131949,243771,256548,597847,252940,598651,826499,848289,463723,270577,700857,769912,598651,418755,143268,332133,853051,884415,850207,617680,934775,341989,14637,203387,791807,585203,15291,833637,467807,478548,468228,342750,416484,458686,183314,555017,478748,360998,397242,598131,58034,934021,961244,762867,675180,978229,939120,279734,341400,768515,903222,704742,603302,258499,408240,718810,73809,802100,725118,298292,929501,162359,542060,14757,147702,833605,3556,189083,614153,439537,443525,341989,860854,245891,337059,73422,670469,919782,555017,520689,311509,819174,5754,781513,39923,304706,96879,854620,471573,856998,259015,433577,962567,621361,538173,408240,886564,454810,790033,816831,623141,495431,489221,737980,210055,542612,629129,598131,854620,442286,193716,26268,255707,148789,684613,419514,522190,888572,684437,658034,847084,572265,418755,839450,48354,661680,455580,737980,925619,39923,783412,930010,976132,572265,776979,396111,355741,3157,193716,552125,4401,439537,15291,358748,877321,105214,174807,274410,805809,122252,839348,214358,725118,695150,913569,201056,97774,899639,424682,571316,926985,706922,310334,199451,401745,560820,445935,717777,899908,296672,277800,531220,344152,838871,834473,262762,180334,624423,266896,813595,3556,526232,304767,67792,158848,27766,958312,921119,96314,704742,137954,1116,57593,342013,641852,617326,342750,105592,491423,574697,899706,97774,264918,406305,363984,800056,338499,996278,611487,58793,946410,499322,260086,455580,848289,44639,867290,157006,424682,121232,399036,902283,225732,190083,420960,160493,509983,44639,217218,393510,839813,775856,896864,358748,790163,310334,164780,537961,453725,928331,859572,828498,476162,994344,598131,867391,424651,749059,276851,270241,946410,352561,48354,554173,379117,658034,21794,732767,616508,718165,383098,704742,893739,151786,856998,902283,101578,202768,442286,700494,986962,896787,69657,438324,225732,505665,840635,94959,842938,216748,741938,214358,905188,220551,466796,440427,17514,256393,579870,887665,147702,310549,893378,441062,441629,945178,732748,989085,380492,762516,477727,840635,589975,921119,937894,838374,946546,790163,564700,579061,580914,231553,40459,635920,335814,334045,435943,219862,387475,918854,783861,803526,692911,3157,439537,839743,171089,537752,334661,585203,520533,971303,286342,580914,311460,660832,467996,704230,255145,624799,769116,163963,335275,730887,290596,839450,411137,378967,392306,717777,990678,505665,913551,286457,393571,996278,651234,621646,68154,605355,614153,632486,270577,845454,747065,675781,966062,589975,598479,391375,887335,82705,63601,96314,212453,284870,276851,664446,453751,343258,262969,898565,61776,390704,608170,473235,188183,520689,280685,275852,222714,926965,343258,693846,366043,455890,662904,40156,94959,661680,258360,670414,243771,810786,68798,769116,209597,91110,194411,839348,4126,296209,423626,852049,161797,912307,277800,404685,17514,987725,97591,467807,97774,508435,932141,452568,637933,832484,153888,112200,178302,214358,435943,308206,549784,866873,329980,644086,342750,877321,334045,334275,857839,628461,78638,361832,173579,297958,910717,40184,58793,364656,837376,145279,827294,61939,473935,469023,288657,792551,197203,630075,153888,652140,816831,302841,700857,160493,688435,298292,55401,342393,143045,43133,891357,188278,612223,747803,891357,368735,112972,681100,158728,396149,783790,860676,627794,953098,40184,634086,970559,644086,876806,884415,594524,805362,722281,939120,308206,863013,717777,840219,819174,5754,3157,254907,60439,767846,508435,91110,386445,813160,334661,617729,939178,189085,358122,441841,921093,231553,790033,986962,652140,429756,341400,246570,987020,768595,791807,410995,736616,659135,390704,953098,416056,547563,496439,324545,251664,840635,304450,542350,814935,940446,624423,219862,913867,354617,256393,890906,489221,726828,899639,158728,731515,156498,26268,195816,180334,692485,667067,783497,653521,961244,961244,225936,991296,651234,409114,401745,992537,477727,813284,680413,856945,172778,39923,941600,433461,340873,544620,722437,409330,636821,708592,781513,166572,430852,290596,311509,105592,807386,429756,884168,959833,671637,133050,347469,611487,379258},
//                y={};
//        int []x = {20,9,15,17}, y = {16,7,3,15};
//        int []x = {1,2,1,2}, y = {4,5,6,7};
        int []x = {6,7,7,6,6,11,11,7}, y = {16,9,1,12,9,8,6,15};
//        int []x = {15,16,18,3}, y = {14,17,8,17};
//        int []x = {15,16,18,3}, y = {14,17,8,17};
//        int []x = {1,14,14,15}, y = {7,9,16,14};
        System.out.println(maxSumDistinctTriplet(x,y));
    }

    public static int maxSumDistinctTriplet1(int[] x, int[] y) {
        int max=-1;
        for(int i=0;i<x.length;i++){
            for(int j=0;j<x.length;j++){
                for(int k=0;k<x.length;k++){
                    if(x[i] != x[j] && x[j] != x[k] && x[i] != x[k]){
                        max = Math.max(max,y[i]+y[j]+y[k]);
                    }
                }
            }
        }
        return max;
    }

    public static int maxSumDistinctTriplet(int[] x, int[] y) {
//        int store[]=new int[1000001];
//        int maxNo=0;
//        for(int i=0;i<x.length;i++){
//            store[x[i]]=Math.max(store[x[i]],y[i]);
//        }
//        Arrays.sort(store);
//        int max=-1;
//        int length = store.length;
//        if(store[length-1] != 0 && store[length-2] != 0 && store[length-3] != 0) {
//            return store[length - 1] + store[length - 2] + store[length - 3];
//        }
//        return -1;
        int store[]=new int[1000001];
        int maxNo=0;
        int max1=0,max2=0,max3=0;
        for(int i=0;i<x.length;i++){
            store[x[i]]=Math.max(store[x[i]],y[i]);
        }
        for(int i:store){
            if(max1 < i){
                max3=max2;
                max2=max1;
                max1=i;
            }else if(max2 < i ){
                max3=max2;
                max2=i;
            }else if(max3 < i ){
                max3=i;
            }
        }
        // Arrays.sort(store);
        int max=-1;
        int length = store.length;
        if(max1 != 0 && max2 != 0 && max3 != 0) {
            return max1+max2+max3;
        }
        return -1;
    }
    public static int maxSumDistinctTriplet2(int[] x, int[] y) {
        List<int[]> lst = new ArrayList<>();
        for(int i=0;i<x.length;i++){
            lst.add(new int[]{x[i],y[i]});
        }
        Collections.sort(lst,(p1,p2) -> p1[1]-p2[1]);
        for(int i[]:lst){
            System.out.println(Arrays.toString(i));
        }
        int max=-1;
        for(int i=0;i<x.length;i++){
            int point[]=lst.get(i);
            int start=i+1,end = x.length-1;
            int sum=-1,prevSum=0;
            while(start < end ){
                int sPoint[]=lst.get(start);
                int ePoint[]=lst.get(end);
                sum=point[1]+sPoint[1]+ePoint[1];
                if(sum > prevSum){
                    start++;
                }else{
                    end--;
                }
                if(point[0] != sPoint[0] && sPoint[0] != ePoint[0] && point[0] != ePoint[0] ){
                    max = Math.max(max,sum);
                }
                prevSum=sum;
                sum=-1;

                // while(start < x.length && point[0] ==sPoint[0]) start++;
                // while(end > 0 && point[0] == ePoint[0]) end--;
            }
            max = Math.max(max,sum);
        }
        return max;
    }
}
